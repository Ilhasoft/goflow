package i18n

import (
	"fmt"
	"os"
	"sort"
	"strconv"
)

// POTemplate is a util for writing a PO template
type POTemplate struct {
	messages map[string]bool
}

// NewPOTemplate creates a new PO template
func NewPOTemplate() *POTemplate {
	return &POTemplate{messages: make(map[string]bool)}
}

// Add adds the given message to the template
func (p *POTemplate) Add(message string) {
	if message != "" {
		p.messages[message] = true
	}
}

// Save writes this PO template to the given path
func (p *POTemplate) Save(path string) error {
	// extract messages and sort alphabetically
	messages := make([]string, 0, len(p.messages))
	for m := range p.messages {
		messages = append(messages, m)
	}
	sort.Strings(messages)

	poFile, err := os.Create(path)
	if err != nil {
		return err
	}

	defer poFile.Close()

	poFile.WriteString("# GENERATED by goflow docgen\n\n")

	for _, m := range messages {
		poFile.WriteString(fmt.Sprintf("msgid %s\n", strconv.Quote(m)))
		poFile.WriteString("msgstr \"\"\n")
		poFile.WriteString("\n")
	}
	return nil
}
